Laravel — бесплатный веб-фреймворк с открытым кодом, предназначенный для разработки с использованием архитектурной модели MVC

Artisan — интерфейс командной строки, который поставляется с Laravel. Он содержит набор полезных команд, помогающих вам при разработке приложения. Для просмотра списка доступных команд используйте команду list: php artisan list

composer careate-project --prefer-dist lafravel/laravel (название)
composer careate-project --prefer-dist lafravel/laravel test
php artisan serve  - запуск сервера (http://127.0.0.1:8000)
php artisan route:list  - выволит список всех стр

Middleware Web - та страница которую я открываю в браузере
Route::get('uri', 'action') - Открываю страницу с помощью get запроса, он принимает uri и action 
URI - адрес, ссылка на страницу

Каталог Console содержит все ваши Artisan-команды, тогда как каталог Http содержит контроллеры, посредники и запросы.
Каталог Http содержит ваши контроллеры, посредники и запросы форм. Практически вся логика обработки запросов, поступающих в ваше приложение, будет размещена в этом каталоге.
Модели позволяют запрашивать данные в таблицах, а также вставлять новые записи в таблицу.


Route::get('uri', 'action') -> внутри action создаю анонимную функцию: 
function(){ 
    return "Hello Wolrd";
}

<!----------------------Создание шаблона и страницы hello------------------------->
Route::get('/hello', function(){
	return "hello",  // Здесь указываю название шаблона или путь к шаблону
	[
	"name" => "Alish",  // массив, view-> $name == Alish который доступен как перменная в папке view
	]
})

В папке views создаю новый файл, (hello.blade.php)
Также можно создать отдеьную папку layuots/app.blade.php -> и внутри подговить шаблон основной и уже внутри hello.blde.php:
@extends('layouts.app')  //  @extends('папка.название') 


Иногда требуется зарегистрировать маршрут, отвечающий на несколько HTTP-методов. Вы можете сделать это с помощью метода match. Или вы даже можете зарегистрировать маршрут, отвечающий на все HTTP-методы, используя метод any:

Route::match(['get', 'post'], '/', function () {
    //
});

Route::any('/', function () {
    //
});

<!----------------------Создание шаблона app.blade.php------------------------->
Внутри-> app.blade.php можно создать контрольную точку для каждой страницы:
<body>
   @include('components.nav') // Создание компонента  @include('папка.название'), в корневой папке views создаю папку components 

   <div class="container mt-5">
   <h1>Hello my dear friend</h1>
   @yield('content')
   </div>
</body>

<!----------------------Создание копонент nav.blade.php------------------------->
<nav>
...
</nav>

<!----------------------Создание шаблона hello.blade.php------------------------->
@extends('layouts.app') // Подключение

@section('content')  // Контрольная точка
<h2>This Page: Hello {{$name}} </h2> // {{ключ массива}}
@endsection



<!----------------------Создание контроллера------------------------->
в терминале пишу:
php artisan make:controller (название контроллера) // Создание контроллера
php artisan make:controller PagesControllres 

И подключение к нужному фaйлу:
use App\Http\Controllres\название контроллера // Подключение контроллера к web.php
use App\Http\Controllres\PagesController


Route::get('/путь', [класс::class, "метод"])
Route::get('/laravel', [PagesController::class, "page"]);  // Подключение контроллера к web.php

{
   public function page(){
	return view('laravel', [
	    "name"=> "Alish",     // Функция
	])
   }
}

<!----------------------Создание таблицы в базе данных------------------------->
в терминале пишу:

php artisan make:migration create_название_table
php artisan make:migration create_laravel_table // Создание migrate
php artisan migrate:refresh // Обновление migrate

$tabel->тип('название', 'длина')-> nullable->unique()-> доп.параметры // Созлание таблиц (поля)
$table->stirng('title', 250)->nullable->unique();

php artisan migrate:rollback // Откат миграций
php artisan migrate:status // Можно узнать статус
php artisan migrate:reset //  Oткатит все миграции
php artisan migrate:fresh // Yдалит все таблицы из базы данных, а затем выполнит команду migrate


Проверка наличия таблицы / столбца:

if (Schema::hasTable('users')) {
    // Таблица `users` существует ...
}

if (Schema::hasColumn('users', 'email')) {
    // Таблица `users` существует и содержит столбец `email` ...
}


Если таблица БД вашей модели не соответствует этому соглашению, вы можете вручную указать имя таблицы модели, определив свойство table в модели:
namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class Flight extends Model
{
    /**
     * Таблица БД, ассоциированная с моделью.
     *
     * @var string
     */
    protected $table = 'my_flights';
}


<!----------------------Создание model------------------------->

Название model должен в единственном числе!!!

в терминале пишу:
php artisan make:model Название // Создание модели
php artisan make:model Todo 
php artisan make:model Todo -m // Создание модели и миграции


В папке где я создал controller могу добавить вручную запись:
Для этого подключаю класс:

use App\Models\название // Подключение
use App\Models\Todo

1)
	{
	   $todo = new Todo();
	   $todo->title = "Прочитать книгу";
	   $todo->note = "Начиная с 99 стр";
	   $todo = $todo->save();
	   dd($todo);
	}

2)      {
           $todo = Todo::create([
	      'title'=> "Прочитать книгу",
	      'note'=> "Начиная с 99 стр",
           ]);
	}  
	
	$todos = Todo::all(); // Получение всех записей с таблицы

	return viewe('todo', [
	   "pageName" => "Todo page", // Отправка к файлу todo.blade.php
	   "todos" => $todos,
	]);	
	
        Дальше в папку с моделями пишу:
	protected $fillable = ['title', 'note']; // Указываю поля

	И в файле todo.blade.php вывожу:
	
	@foreach($todos as $todo)
	   {{$todo->title}}
	@endforeach

	Редактирование записей:
	$todo = Todo::find(1) // Ищет по id
	if($todo){  // Если такая запись есть то:
            $todo-> status = 1; // Присвоение навого значение
	    $todo->save();
	}

	
	Удаление:
	$todoDelete = Todo::fint(7)
	if($todoDelete){
	   $todoDelte->delete();
	}

	Сортировка:
	$todoNotDone = Todo::where('поле', 'значение')->get(); // Поиск по status

	$todoNotDone = Todo::where('status', 0)->get();
	return view('not-done', [
	    'todoNotDone' => $todoNotDone;
	]);

3. Создание блога:

Создаю model и migrate -> php artisan make:model Post -m
Создаю стр в web.php -> Route::get('/post/{id}', [PageController::class, "postPage"]); // Передаю id
Создаю метод в PageController:
	
	use: App\Models\Post; // Подкоючаю model
	
	public function postPage($id){    // id здесь доступен как аргумент
	$post = Post::find($id); // Также ищу по id

	if(!$post){            // Делаю проверку, если нету такой с id и стр 
           return abort(404);  // то с помощью функции ABORT делаю рекдирект
	}

	return view(){
	   "post"=> $post,
	   "pagName"=> $post['title'],
           }
	}
	

Параметры маршрута всегда заключаются в фигурные скобки {} и должны состоять из буквенных символов. Подчеркивание (_) также допускается в именах параметров маршрута. Параметры маршрута будут внедрены в замыкания маршрута / контроллеры в зависимости от их порядка, т.е. имена аргументов замыкания маршрута / контроллера не имеют значения.



4. Создание CASCSDE связи:

Создаю model и migrate для post -> php artisan make:model Comment -m 
Создаю таблицу-> {
1.		   $table->id();
		   $table->string('text', 200)->nullable();
	           $table->unsignedBigInteger('post_id')->nullable();

		   $table->foreign('post_id')->references('значение по которому буду искать')->on('таблица')->onDelete('cascade');
		   $table->foreign('post_id')->references('id')->on('posts')->onDelete('cascade'); // Связь
		   }

2. Также моно так:
		   Schema::table('posts', function (Blueprint $table) {
                          $table->foreignId('user_id')
                                ->constrained()
                                ->onUpdate('cascade')
                                ->onDelete('cascade');
                   });


В файле modele пишу:
	public function comments(){
           return $this->hasMany(Comment::class, 'article_id', 'id');
        }
	
В стр:
      @foreach($post_comments as $comment)




5. Создание формы для добавлениe поста с помощью ajax:
Сперва я создаю route для отображение всех посто:

<!----------POST PAGE(все посты)----------->
use App\Http\Controllers\PagesController;
Route::get('/posts', [PagesController::class, 'postsPage'])->name('post');
@extends('layouts.app')

@section('content')
   @foreach ($posts as $post)
      <div>
         <a href="/lesson4/public/posts/{{ $post->id }}"><b>{{ $post->title }}</b></a>
         <p>{{ $post->preview }}</p>
         <a href="/lesson4/public/post/{{ $post->id }}/update">Update Post</a>
         <form action="/lesson4/public/post/{{ $post->id }}/delete" method="POST">
            @csrf
            <input type="hidden" name="id" value="{{ $post->id }}">
            <button type="submit">Delete</button>
         </form>
         <hr>
      </div>
   @endforeach
@endsection
	
use App\Models\Post; 
public function postPage(){
   $posts = Post::all(); // Приравниваю
   return view('posts', [
      'pageTitle'=> "Post Page",
      'posts'=> $posts;
   ])
}

<!----------POST PAGE{id}(внут стр поста)----------->
Route::get('/post/{id}', [PagesController::class, postPage]);

@extends('layouts.app')

@section('content') 
   <div>
      <p><b>{{ $post->title }}</b></p>
      <p>{{ $post->preview }}</p> 
      <hr>
      @foreach ($post->commentaries as $commentary) // Сразу добавляю коменты для поста
         <p>{{ $commentary->name }}</p>
         <p>{{ $commentary->comment }}</p>
      @endforeach
   </div> 
@endsection

public function postPage($id){
   $post = Post::find($id);
   if(!$post){
      return abort(404);
   }
   
   return view('post' [
      'pageTitle'=> $post->title,
      'post'=> $post,
   ]);
}

<!----------CREATE POST PAGE(создание поста)----------->
use App\Http\Controllers\CreatePostsController;

Route::get('/create', [PagesController::class, 'createPost'])->name('create'); // Сама стр с формой
Route::post('/create/post', [CreatePostsController::class, 'getPost']); // Стр которя принимает значение с формы


public function createPost(){ 
   $posts = Post::all();
      return view('create', [
         'pageTitle'=> 'Create Page',
         'posts'=> $posts,
      ]);
}

CreatePostsController:
use App\Models\Post;

public function getPost(Request $request){ // Для POST запроса
   $data = $request->only('title', 'preview');
   $post = Post::create([            // Именно этот функцтонал отвечает за добавление!!!
      'title'=> $data['title'],
      'preview'=> $data['preview'],
   ]);
        
   return redirect()->back();
   return view('get', [
     'pageTitle'=> 'Create Page',
     'post'=> $post,
   ]);
}

create.blade.php:

<form action="create/post" method="post">
   @csrf
   <input type="text" name="title" placeholder="Title">
   <br>
   <textarea name="preview" type="text" placeholder="Text"></textarea>
   <br><br>
   <button type="submit">Create Post</button>
</form>

Также добаляю в App\Models\Post:
protected $fillable = ['id','title', 'preview']; // Для добавление


<!----------COMMENTARY CREATE PAGE(создание)----------->

Route::post('/create/commentary', [CreatePostsController::class, 'getCommentary']);

CreatePostsController:

use App\Models\Commentary;
public function getCommentary(Request $request){
   $data = $request->only('name', 'comment', 'post_id');
   $commentary = Commentary::create([
      'name' => $data['name'],
      'comment' => $data['comment'], 
      'post_id' => $data['post_id'], 
   ]);

   return redirect()->route('posts');
   return view('get', [
      'pageTitle'=> "Crete Commetary Page",
   ]);
}


create.blade.php:
<form action="create/commentary" method="POST">
   @csrf
   <input type="text" name="name" placeholder="Commetary name">
   <br>
   <textarea name="comment" type="text" placeholder="Text"></textarea>
   <br><br>
   <select name="post_id">
      <option>Выбор</option>
      @foreach ($posts as $post)
      <option value="{{ $post->id }}">{{ $post->title }}</option>
      @endforeach
   </select>
   <br>
   <button type="submit">Create Commentary</button>
</form>


post.blade.php(внут стр поста):
@foreach ($post->commentaries as $commentary)
   <p>{{ $commentary->name }}</p>
   <p>{{ $commentary->comment }}</p>
@endforeach

commentaries_table.php(стр миграции):
{
Schema::create('commentaries', function (Blueprint $table) {
    $table->id();
    $table->string('name', 150)->nullable();
    $table->string('comment', 250)->nullable()->unique();
    $table->unsignedBigInteger('post_id')->nullable(); 
    $table->timestamps();

    $table->foreign('post_id')->references('id')->on('posts')->onDelete('cascade'); // Связи
});
}

App\Models\Post:
{
    use HasFactory;
    protected $fillable = ['id','title', 'preview'];

    public function commentaries(){
        return $this->hasMany(Commentary::class, 'post_id', 'id'); // Связи
    }

}

<!----------UPDATE POST(редактирование)----------->

Route::get('/post/{id}/update/', [PagesController::class, 'updatePage']);
Route::post('/post/update', [CreatePostsController::class, 'update']);

PagesController:
public function updatePage($id){

    $post = Post::find($id);

    return view('update', [
        'pageTitle' => $post['title'],
        'post'=> $post,
    ]);
}

CreatePostsController:
public function update(Request $request){
    $data = $request->only('title', 'preview', 'id');

    $post = Post::find($data['id']);
    $post->title = $data['title'];
    $post->preview = $data['preview'];
    $post->save();

    return redirect()->route('posts');
}

update.blade.php:
@extends('layouts.app')

@section('content')
   <form action="/lesson4/public/post/update" method="post">
      @csrf
      <input type="hidden" name="id" value="{{ $post->id }}">
      <input type="text" name="title" value="{{ $post->title }}">
      <br><br>
      <textarea name="preview">{{ $post->preview }}</textarea>
      <br>
      <button type="submit">Update Post</button>
   </form>
@endsection

<!----------DELETE POST(удаление)----------->

Route::post('/post/{id}/delete', [CreatePostsController::class, 'delete']);

CreatePostsController:
public function delete(Request $request){
    $data = $request->only('id');
    $post = Post::find($data['id']);
    $post->delete();

    return redirect()->route('posts');
}
posts.blade.php:
@extends('layouts.app')

@section('content')
   @foreach ($posts as $post)
      <div>
         <a href="/lesson4/public/posts/{{ $post->id }}"><b>{{ $post->title }}</b></a>
         <p>{{ $post->preview }}</p>
         <a href="/lesson4/public/post/{{ $post->id }}/update">Update Post</a>
         <form action="/lesson4/public/post/{{ $post->id }}/delete" method="POST">
            @csrf
            <input type="hidden" name="id" value="{{ $post->id }}">
            <button type="submit">Delete</button>
         </form>
         <hr>
      </div>
   @endforeach
@endsection



7. Аутендификация:

composer require laravel/ui
php artisan ui vue --auth // Создание стр
npm install && npm run dev

После этого я могу переделать register.blade.php, например добавить еще одну полу login:

<div class="form-group row">
    <label for="login" class="col-md-4 col-form-label text-md-right">{{ __('Login') }}</label>

    <div class="col-md-6">
        <input id="login" type="text" class="form-control @error('login') is-invalid @enderror" name="login" value="{{ old('login') }}" required autocomplete="login" autofocus>

        @error('login')
            <span class="invalid-feedback" role="alert">
                <strong>{{ $message }}</strong>
            </span>
        @enderror
    </div>
</div>

Также в файле RregisterController.php:
return Validator::make($data, [
    'name' => ['required', 'string', 'max:255'],
    'email' => ['required', 'string', 'email', 'max:255', 'unique:users'],
    'password' => ['required', 'string', 'min:8', 'confirmed'],
    'login' => ['required', 'string', 'max:100'], // Добавляю
]);

return User::create([
    'name' => $data['name'],
    'email' => $data['email'],
    'password' => Hash::make($data['password']),
    'login' => $data['login'],
]);

И файле App\Models\Auth:
protected $fillable = [
    'name',
    'email',
    'password',
    'login',
];

php artisan migrate:refresh

Для того чтобы использовать другой шаблон для авторизации и регистрации я могу переопределить в controller, скопировав функцию с vendor/laravel/ui/..

Например для того чтобы регистрация (вход) была с помощью логин, то я ф LoginController.php:
public function username{
   return 'login';
}

Я могу создать стр которая будет доступна только у автаризованных пользователей, для этого я создаю как обычно controller и route:

Route::get('/login', [PageController::class, 'loginPAge'])->name('login')->middleware('auth');

Для отображение данных у пользователей:

{{ Auth::user()}} // Массив

@auth // Отображает только для пользователей у которх есть автаризация
   <p>Secret Text</p>
@endauth


Что бы полсе автаризации нас переадрессавала на другую стр, в файле -> app/Providers/RouteServiceProvider.php

public const HOME = '/home'; Менеям на -> public const HOME '/admin';


8. Пасредники:

Middleware - это пасредник

В файл database/miration/user_table.php добавляю полю group:
$table->unsignedInteger('group')->default(1); // 1 -user; 2 - admin

И php artisan migrate:refresh

Для того чтобы admin стр была доступна только у пользователя group = 2(только для админа), я создаю middleware:
php artisan make:middleware AdminMiddleware 

Дальше перехожу на стр app/Http/Middleware/AdminMiddleware:

Также не забываю добавить facedes-> use Illuminate\Support\Facades\Auth;

class AdminMiddleware
{
    public function handle(Request $request, Closure $next)
    {

        if(Auth::user()->group != 2){ // Проверяю если группа пользователей на равен то делаю редирект
            return abort(403);
        }

        return $next($request);
    }
}

И в файле app/Http/Models/User.php добавляю полю group:

protected $fillable = [
   ...
   'gruop',
];

Дальше в файле app/Http/Kernel.php:

protected $routeMiddleware = [
   'название' => \App\Http\Middleware\назваие посредика которого я создал с помощью php artisan::class,
   'admin' => \App\Http\MiddleWare\AdminMiddleWare::class,
];  -> И теперь пасредник (admin) мне доступен на стр web.php

 

Route::get('/admin', [PageController::class, 'admin'])->name('admin')->middleware(['admin', 'auth']) // вывожу





<!====================Лайф хак==========================>

composer install --ignore-platform-reqs

1. Для создание стр
Route::get('/articles', [ArtcileController, 'index'])->name('aticle.index');
Route::get('/articles/{id}', [ArtcileController, 'show'])->name('aticle.show');
Route::get('/articles/create', [ArtcileController, 'create'])->name('aticle.create');
Route::post('/articles', [ArtcileController, 'store'])->name('aticle.store');
Route::get('/articles/{id}/edit', [ArtcileController, 'edit'])->name('aticle.edit');
Route::put('/articles', [ArtcileController, 'update'])->name('aticle.update');
Route::delete('/articles/delete', [ArtcileController, 'destroy'])->name('aticle.destroy');

php artisan make:controller PhotoController --resource --model=Photo // Controller & Model & DataBase

Все это равно = Route::resource('articles', ArticleController::class);

php artisan make:controller ArticleController --resource //  И все controller автоматом добавиться
 
Route::group(['prefix' => 'admin', 'middleware' => ['auth']], function(){
   Route::resource('panel', PanelController::class);
}); или

Route::middleware(['role:admin'])->prefix('admin')->group(function(){
   Route::get('/', [AdminController::class, 'index']);
})


2. Для формы:
<form method="POST" action="{{route (articles.store)}}">

3. Для store(создание поста) можно в методе сделать валидацию:

public function store(Request $request){
   $data = $request->all();

   $data = $request->validate([
   'title' => ['required', 'string', 'max:100'],
   'description' => ['nullable', 'string', 'max:300']
   ]);
   
    $article = Article::create($data); // Создание

}

4. Сообщение для ошибок:

Если форма пустая:
<input name="title" placeholder="Title"  type="text">
@error('name')
   {{ $message }} // Сообщение
@enderror

5. Создание title:

<title>@yeld('title')</title>
@section('title', 'Заголвок страницы') // Вывод на странице

6. Для переди данных:(controller)

$articles = Article::latest()->paginate(2);
return view('article', compact( 'article'))

Вывод(article):
@if($articles->isEmpty())
   <p>Нет ни одной записи</p>
@else
   @foreach($articles as $article)
      <p class="title">{{$article->title}}</p>
   @endforeach

  {{$articles->links()}} // пагинация
@endif


7. Редирект:
Route::redirect('откуда', 'куда', 301);
Route::redirect('/', '/home', 301);

Route::resource('photos', PhotoController::class)
        ->missing(function (Request $request) { // Если не найдет стр
            return Redirect::route('photos.index');
        });

8. laravel-permission

composer require spatie/laravel-permission

Дальше в папке config/app.php:
Spatie\Permission\PermissionServiceProvider::class,

php artisan vendor:publish --provider="Spatie\Permission\PermissionServiceProvider"
php artisan config:clear
php artisan migrate:refresh

php artisan permission:create-role admin // создание админского роля

В файле app\Moldels\User.php:
use HasRolres // добавить 
use Spatie\Permission\Traits\HasRoles;


app/Http/controllers/RegisterController.php:

    protected function create(array $data)
    {
        $user = User::create([
            'name' => $data['name'],
            'login' => $data['login'],
            'password' => Hash::make($data['password']),
        ]);
        $user->assignRole('user');
        
        return $user;
    }

app/Http/Kernel.php:
protected $routeMiddleware = [
    // ...
    'role' => \Spatie\Permission\Middlewares\RoleMiddleware::class,
    'permission' => \Spatie\Permission\Middlewares\PermissionMiddleware::class,
    'role_or_permission' => \Spatie\Permission\Middlewares\RoleOrPermissionMiddleware::class,
];


Медиа Файлы:
composer require barryvdh/laravel-elfinder
 
В файле app/config/app.php: (providers)
Barryvdh\Elfinder\ElfinderServiceProvider::class,

php artisan elfinder:publish
php artisan vendor:publish --provider='Barryvdh\Elfinder\ElfinderServiceProvider' --tag=config